// <auto-generated />
using System;
using CrudCloudDb.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrudCloudDb.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CrudCloudDb.Core.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("action");

                    b.Property<string>("Changes")
                        .HasColumnType("text")
                        .HasColumnName("changes");

                    b.Property<string>("EntityId")
                        .HasColumnType("text")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.DatabaseInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("text")
                        .HasColumnName("connection_string");

                    b.Property<string>("ContainerId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("container_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("CredentialsViewed")
                        .HasColumnType("boolean")
                        .HasColumnName("credentials_viewed");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("database_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Engine")
                        .HasColumnType("integer")
                        .HasColumnName("engine");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_database_instances");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_database_instances_user_id");

                    b.ToTable("database_instances", (string)null);
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("pk_email_logs");

                    b.ToTable("email_logs", (string)null);
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("DatabaseLimitPerEngine")
                        .HasColumnType("integer")
                        .HasColumnName("database_limit_per_engine");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer")
                        .HasColumnName("plan_type");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_plans");

                    b.HasIndex("PlanType")
                        .IsUnique()
                        .HasDatabaseName("ix_plans_plan_type");

                    b.ToTable("plans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1b108e5-fcbc-4a91-8967-b545ff937016"),
                            DatabaseLimitPerEngine = 2,
                            Name = "Free Plan",
                            PlanType = 1,
                            Price = 0.00m
                        },
                        new
                        {
                            Id = new Guid("0b2a601a-1269-4818-9161-2797f54a7100"),
                            DatabaseLimitPerEngine = 5,
                            Name = "Intermediate Plan",
                            PlanType = 2,
                            Price = 5000.00m
                        },
                        new
                        {
                            Id = new Guid("7be9fe44-7454-4055-8a5f-eff194532a2e"),
                            DatabaseLimitPerEngine = 10,
                            Name = "Advanced Plan",
                            PlanType = 3,
                            Price = 10000.00m
                        });
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("MercadoPagoSubscriptionId")
                        .HasColumnType("text")
                        .HasColumnName("mercado_pago_subscription_id");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_subscriptions_plan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_subscriptions_user_id");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CurrentPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_plan_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordResetExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_expires");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_token");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text")
                        .HasColumnName("verification_token");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CurrentPlanId")
                        .HasDatabaseName("ix_users_current_plan_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.WebhookConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PayloadUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload_url");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<string>("SubscribedEvents")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subscribed_events");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_webhook_configs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_webhook_configs_user_id");

                    b.ToTable("webhook_configs", (string)null);
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.DatabaseInstance", b =>
                {
                    b.HasOne("CrudCloudDb.Core.Entities.User", "User")
                        .WithMany("Databases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_database_instances_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.Subscription", b =>
                {
                    b.HasOne("CrudCloudDb.Core.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_plans_plan_id");

                    b.HasOne("CrudCloudDb.Core.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_users_user_id");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.User", b =>
                {
                    b.HasOne("CrudCloudDb.Core.Entities.Plan", "CurrentPlan")
                        .WithMany("Users")
                        .HasForeignKey("CurrentPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_plans_current_plan_id");

                    b.Navigation("CurrentPlan");
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.WebhookConfig", b =>
                {
                    b.HasOne("CrudCloudDb.Core.Entities.User", "User")
                        .WithMany("WebhookConfigs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_webhook_configs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.Plan", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CrudCloudDb.Core.Entities.User", b =>
                {
                    b.Navigation("Databases");

                    b.Navigation("Subscriptions");

                    b.Navigation("WebhookConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
